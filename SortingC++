#include<iostream>
#include<vector>
#include<queue>
using namespace std;

void swap(int *a,int *b){int t=*a;*a=*b;*b=t;}
void bub(int A[],int n){
    for(int i=0;i<n-1;i++){
        int j;
        for(j=0;j<n-1-i;j++){
           if(A[j]>A[j+1])
           swap(&A[j],&A[j+1]);}}
}

void insertion(int A[],int n){
    for(int i=1;i<n;i++){
        int j=i-1;
            int x=A[i];
        while(j>-1&&A[j]>x){
            A[j+1]=A[j];
            j--;
        }A[j+1]=x;
    }
}
int findmax(int A[],int n){
    int M=0;
    for(int i=0;i<n;i++)
        if(M<A[i]) M=A[i];
  cout<<M<<endl;
    return M;
}

void countsort(int A[],int n){
    int max=findmax(A,n);
    int count [max+1] {0};
    for(int i=0;i<n;i++){
        count[A[i]]+=1;
    }
    int i=0, j=0;
    while(i<max+1){
        if(count[i]>0){
            A[j++]=i;count[i]--;
        }else
           i++;
    }
}
void selection(int A[],int n){
    for(int i=0;i<n-1;i++){
        int j,k;
        for(j=k=i;j<n;j++){
            if(A[j]<A[k]){
                k=j;
            }
        }swap(&A[i],&A[k]);
    }
}

int partition(int A[],int l,int h){
    int pvot=A[l];
    int i=l;
    int j=h;
    do{
        do i++;while(pvot>=A[i]);
       // do j--;while(pvot<A[j]);
        while(pvot<A[j])j--;
        if(i<j)
            swap(&A[i],&A[j]);     
    }while(i<j);
    swap(&A[j],&A[l]);
    return j;
}

void Quick(int A[],int l,int h){
int j;
        if(l<h){
            j=partition(A,l,h);
            Quick(A,l,j-1);
            Quick(A,j+1,h);
        }
}
void sellsort(int A[],int n){
    for(int gap=n/2;gap>0;gap/=2){
        for(int i=gap;i<n;i++){
            int j=i-gap;
            int temp=A[i];
            while(j>=0 && A[j]>temp){
                A[j+gap]=A[j];
                j=j-gap;
            }A[j+gap]=temp;

        }
    }
}

void merg(int A[],int l,int h){
    int mid=(l+h)/2;
   int i=l;int k=l;
   int j=mid+1;int c[100];
   while(i<=mid && j<= h){
       if(A[i]<A[j]){
           c[k++]=A[i++];
       }else{
           c[k++]=A[j++];
       }
   }
   while(i<=mid)
       c[k++]=A[i++];
   while(j<=h)
       c[k++]=A[j++];
    for(int t=l;t<=h;t++){
        A[t]=c[t];
    }
}
void calm(int A[],int l,int h){
    if(l<h){
        int mid=(l+h)/2;
        calm(A,l,mid);
        calm(A,mid+1,h);
        merg(A,l,h);
    }
}
void RadixSort(int A[],int n){
    vector<queue<int>> v(10);int x=0;int inc=1;
    int max=findmax(A,n);
    while(inc<max){
    for(int i=0;i<n;i++){
           x= (A[i]/inc)%10;
           v[x].push(A[i]);   
    }int i=0;int j=0;
    while(i<10){
      if(!v[i].empty()){ 
        A[j++]= v[i].front();v[i].pop();
      }else{
          i++;
      }
    }
   inc*=10; } 
}
int main(){
    int A[]={8,5,12,3,2,0,65,575,3,25,65,7,44,35,31214,36,668,67};
    int n=18;
    sellsort(A,n);
   // selection(A,n);
    for(int k=0;k<n;k++){
        cout<<A[k]<<" "; }
    return 0;
}
